name: Build & Push (reusable)

on:
  workflow_call:
    inputs:
      go_version:
        required: true
        type: string
      registry:
        required: true
        type: string
      working_dir:
        required: false
        type: string
        default: ./service
      dockerfile:
        required: false
        type: string
        default: ./service/Dockerfile
      context:
        required: false
        type: string
        default: ./service
      config_file:
        required: false
        type: string
        default: configs/config.yaml
      bin_file:
        required: false
        type: string
        default: service.linux
    secrets:
      REGISTRY_LOGIN:
        required: true
      REGISTRY_PASS:
        required: true
      # ENV_FILE â€” puede ser que no hace falta
      ENV_FILE:
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    defaults:
      run:
        working-directory: ${{ inputs.working_dir }}

    env:
      GO_VERSION: ${{ inputs.go_version }}
      REGISTRY:   ${{ inputs.registry }}
      CONFIG_FILE:${{ inputs.config_file }}
      BIN_FILE:   ${{ inputs.bin_file }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          ref: ${{ github.sha }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache Go (build + modules)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles(format('{0}/**/go.sum', inputs.working_dir)) }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Derive app name and version
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          NAME=$(yq -r '.app.name // "service"' "${CONFIG_FILE}" || echo service)
          CFG_VER=$(yq -r '.app.version // ""' "${CONFIG_FILE}" || true)
          GIT_VER=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          RAW_VER=""
          if [ -n "$GIT_VER" ]; then RAW_VER="$GIT_VER";
          elif [ -n "$CFG_VER" ]; then RAW_VER="$CFG_VER";
          else RAW_VER="v0.0.0"; fi
          if [[ "$RAW_VER" =~ ^v(.+)$ ]]; then TAG="${BASH_REMATCH[1]}"; else TAG="$RAW_VER"; fi
          [ -n "$TAG" ] || TAG="0.0.0-${GITHUB_SHA::7}"

          IMAGE="${REGISTRY}/${NAME}:${TAG}"
          echo "name=$NAME"   >> "$GITHUB_OUTPUT"
          echo "version=$TAG" >> "$GITHUB_OUTPUT"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      - name: Build Linux binary
        env:
          CGO_ENABLED: "0"
        run: |
          GOOS=linux GOARCH=amd64 \
          go build -trimpath -buildvcs=false -ldflags="-s -w" \
            -o "${BIN_FILE}" ./cmd/service

      - name: Ensure config folder
        run: mkdir -p configs

      - name: Create .env from secrets (optional)
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        shell: bash
        run: |
          : > .env
          if [ -n "${ENV_FILE:-}" ]; then printf '%s\n' "$ENV_FILE" > .env; fi

      - name: Sanity check
        run: |
          test -f "${BIN_FILE}" || { echo "Binary ${BIN_FILE} not found"; exit 1; }
          test -f ${{ inputs.dockerfile }} || { echo "Dockerfile not found"; exit 1; }
          ls -la

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_LOGIN }}
          password: ${{ secrets.REGISTRY_PASS }}

      - name: Build & Push image (with cache)
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file:    ${{ inputs.dockerfile }}
          build-args: |
            BIN_FILE=${{ env.BIN_FILE }}
          tags: ${{ steps.meta.outputs.image }}
          push: true
          cache-from: type=gha
          cache-to:   type=gha,mode=max

      - name: Summary
        run: |
          echo "Pushed image: ${{ steps.meta.outputs.image }}"
          echo "::notice title=Image::${{ steps.meta.outputs.image }}"
          echo "::notice title=Version::${{ steps.meta.outputs.version }}"
