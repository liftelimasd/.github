name: Org Build & Push

on:
  workflow_call:
    inputs:
      registry:
        type: string
        required: true
      go_version:
        type: string
        default: "1.25.0"
      working_dir:
        type: string
        default: "./service"
      context:
        type: string
        default: "./service"
      config_file:
        type: string
        default: "configs/config.yaml"

      # НОВОЕ ↓
      expose_ports:
        description: "Ports, example '8134 8135' or '8134,8135'"
        type: string
        default: "8134 8135"
      go_build_target:
        description: "Go-package to build"
        type: string
        default: "./cmd/service"
      copy_env_into_image:
        description: ".env for image"
        type: boolean
        default: false
      runtime_image:
        description: "Runtime image (default is: distroless)"
        type: string
        default: "gcr.io/distroless/static:nonroot"
      cmd_args:
        description: "Arguments for binary"
        type: string
        default: "-conf /configs"

      build_image:
        type: boolean
        default: true
      run_tests:
        type: boolean
        default: false
    secrets:
      REGISTRY_LOGIN:
        required: true
      REGISTRY_PASS:
        required: true
      ENV_FILE:
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        working-directory: ${{ inputs.working_dir }}

    env:
      REGISTRY:    ${{ inputs.registry }}
      CONFIG_FILE: ${{ inputs.config_file }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          ref: ${{ github.sha }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Derive app name and version
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          NAME=$(yq -r '.app.name // "service"' "${CONFIG_FILE}" || echo service)
          CFG_VER=$(yq -r '.app.version // ""' "${CONFIG_FILE}" || true)
          GIT_VER=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          RAW_VER=""
          if [ -n "$GIT_VER" ]; then RAW_VER="$GIT_VER";
          elif [ -n "$CFG_VER" ]; then RAW_VER="$CFG_VER";
          else RAW_VER="v0.0.0"; fi
          if [[ "$RAW_VER" =~ ^v(.+)$ ]]; then TAG="${BASH_REMATCH[1]}"; else TAG="$RAW_VER"; fi
          [ -n "$TAG" ] || TAG="0.0.0-${GITHUB_SHA::7}"
          IMAGE="${REGISTRY}/${NAME}:${TAG}"
          echo "name=$NAME"   >> "$GITHUB_OUTPUT"
          echo "version=$TAG" >> "$GITHUB_OUTPUT"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      - name: (Optional) Go tests
        if: ${{ inputs.run_tests }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version }}
      - name: Run tests
        if: ${{ inputs.run_tests }}
        run: go test ./...

      - name: Create .env from secrets (if baked)
        if: ${{ inputs.copy_env_into_image }}
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        shell: bash
        run: |
          : > .env
          if [ -n "${ENV_FILE:-}" ]; then printf '%s\n' "$ENV_FILE" > .env; fi

      - name: Generate Dockerfile (templated)
        id: gen
        shell: bash
        run: |
          set -euo pipefail
          GEN_DOCKERFILE="${RUNNER_TEMP}/Dockerfile.gen"

          PORTS="$(echo "${{ inputs.expose_ports }}" | tr ',' ' ' | xargs || true)"
          EXPOSE_LINE=""
          if [ -n "${PORTS}" ]; then
            EXPOSE_LINE="EXPOSE ${PORTS}"
          fi

          # Если .env не хотим печь — строка будет пустой
          COPY_ENV_LINE=""
          if [ "${{ inputs.copy_env_into_image }}" = "true" ]; then
            COPY_ENV_LINE="COPY .env /app/.env"
          fi

          cat > "${GEN_DOCKERFILE}" <<'DOCKERFILE'
# syntax=docker/dockerfile:1.7

############################
# Stage 1: Build (Go)
############################
FROM golang:__GO_VERSION__ AS builder
WORKDIR /src

COPY go.mod go.sum ./
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    go mod download

COPY . .
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
    go build -trimpath -ldflags="-s -w -buildid=" \
      -o /out/service.linux __GO_BUILD_TARGET__

############################
# Stage 2: Runtime
############################
FROM __RUNTIME_IMAGE__
WORKDIR /app

COPY --from=builder /out/service.linux /app/service.linux
RUN mkdir -p /configs
COPY configs/config.yaml /configs/config.yaml

__COPY_ENV_LINE__
__EXPOSE_LINE__
ENTRYPOINT ["/app/service.linux","-conf","/configs"]
DOCKERFILE

          # Подставим переменные в шаблон
          sed -i \
            -e "s|__GO_VERSION__|${{ inputs.go_version }}|g" \
            -e "s|__GO_BUILD_TARGET__|${{ inputs.go_build_target }}|g" \
            -e "s|__RUNTIME_IMAGE__|${{ inputs.runtime_image }}|g" \
            -e "s|__COPY_ENV_LINE__|${COPY_ENV_LINE}|g" \
            -e "s|__EXPOSE_LINE__|${EXPOSE_LINE}|g" \
            "${GEN_DOCKERFILE}"

          echo "dockerfile=${GEN_DOCKERFILE}" >> "$GITHUB_OUTPUT"

      - name: Sanity check
        run: |
          set -euo pipefail
          test -f "${{ steps.gen.outputs.dockerfile }}" || { echo "Generated Dockerfile not found"; exit 1; }
          ls -la

      - name: Set up Docker Buildx
        if: ${{ inputs.build_image }}
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        if: ${{ inputs.build_image }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_LOGIN }}
          password: ${{ secrets.REGISTRY_PASS }}

      - name: Build & Push image (BuildKit cache)
        if: ${{ inputs.build_image }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ format('{0}/{1}', github.workspace, inputs.context) }}
          file:    ${{ steps.gen.outputs.dockerfile }}
          tags:       ${{ steps.meta.outputs.image }}
          push:       true
          cache-from: type=gha
          cache-to:   type=gha,mode=max

      - name: Summary
        run: |
          echo "name:    ${{ steps.meta.outputs.name }}"
          echo "version: ${{ steps.meta.outputs.version }}"
          echo "image:   ${{ steps.meta.outputs.image }}"
          echo "::notice title=Build::${{ steps.meta.outputs.name }} v${{ steps.meta.outputs.version }}"
