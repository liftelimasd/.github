name: Org Build & Push

on:
  workflow_call:
    inputs:
      registry:
        type: string
        required: true
      go_version:
        type: string
        default: "1.25.0"
      working_dir:
        type: string
        default: "./service"
      dockerfile:
        type: string
        default: "./service/Dockerfile"
      context:
        type: string
        default: "./service"
      config_file:
        type: string
        default: "configs/config.yaml"
      bin_file:
        type: string
        default: "service.linux"
      build_image:
        type: boolean
        default: true
      run_tests:
        type: boolean
        default: false
    secrets:
      REGISTRY_LOGIN:
        required: true
      REGISTRY_PASS:
        required: true
      ENV_FILE:
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        working-directory: ${{ inputs.working_dir }}

    env:
      REGISTRY:    ${{ inputs.registry }}
      CONFIG_FILE: ${{ inputs.config_file }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          ref: ${{ github.sha }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Derive app name and version
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          NAME=$(yq -r '.app.name // "service"' "${CONFIG_FILE}" || echo service)
          CFG_VER=$(yq -r '.app.version // ""' "${CONFIG_FILE}" || true)
          GIT_VER=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          RAW_VER=""
          if [ -n "$GIT_VER" ]; then RAW_VER="$GIT_VER";
          elif [ -n "$CFG_VER" ]; then RAW_VER="$CFG_VER";
          else RAW_VER="v0.0.0"; fi
          if [[ "$RAW_VER" =~ ^v(.+)$ ]]; then TAG="${BASH_REMATCH[1]}"; else TAG="$RAW_VER"; fi
          [ -n "$TAG" ] || TAG="0.0.0-${GITHUB_SHA::7}"
          IMAGE="${REGISTRY}/${NAME}:${TAG}"
          echo "name=$NAME"   >> "$GITHUB_OUTPUT"
          echo "version=$TAG" >> "$GITHUB_OUTPUT"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      # (опционально) Тесты можно оставить вне Docker
      - name: (Optional) Go tests
        if: ${{ inputs.run_tests }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version }}
      - name: Run tests
        if: ${{ inputs.run_tests }}
        run: go test ./...

      # Если ты копируешь .env в образ — создаём файл до сборки, чтобы попал в контекст
      - name: Create .env from secrets
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        shell: bash
        run: |
          : > .env
          if [ -n "${ENV_FILE:-}" ]; then printf '%s\n' "$ENV_FILE" > .env; fi

      - name: Sanity check
        run: |
          set -euo pipefail
          test -f "${{ github.workspace }}/${{ inputs.dockerfile }}" || { echo "Dockerfile not found"; exit 1; }
          ls -la

      - name: Set up Docker Buildx
        if: ${{ inputs.build_image }}
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        if: ${{ inputs.build_image }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_LOGIN }}
          password: ${{ secrets.REGISTRY_PASS }}

      - name: Build & Push image (BuildKit cache)
        if: ${{ inputs.build_image }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ format('{0}/{1}', github.workspace, inputs.context) }}
          file:    ${{ format('{0}/{1}', github.workspace, inputs.dockerfile) }}
          # build-args:  больше не нужны — бинарь строится внутри
          tags:       ${{ steps.meta.outputs.image }}
          push:       true
          cache-from: type=gha
          cache-to:   type=gha,mode=max

      - name: Summary
        run: |
          echo "name:    ${{ steps.meta.outputs.name }}"
          echo "version: ${{ steps.meta.outputs.version }}"
          echo "image:   ${{ steps.meta.outputs.image }}"
          echo "::notice title=Build::${{ steps.meta.outputs.name }} v${{ steps.meta.outputs.version }}"
