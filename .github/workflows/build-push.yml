name: Org Build & Push

on:
  workflow_call:
    inputs:
      registry:
        type: string
        required: true
      go_version:
        type: string
        default: "1.25.0"
      working_dir:
        type: string
        default: "./service"
      context:
        type: string
        default: "./service"
      config_file:
        type: string
        default: "configs/config.yaml"

      # === Параметры шаблона Dockerfile ===
      expose_ports:
        description: "Ports: '8134 8135' или '8134,8135'"
        type: string
        default: "8134 8135"
      go_build_target:
        description: "Go-package to build"
        type: string
        default: "./cmd/service"
      copy_env_into_image:
        description: "Включать .env внутрь образа (небезопасно)"
        type: boolean
        default: false
      runtime_image:
        description: "Runtime image"
        type: string
        default: "gcr.io/distroless/static:nonroot"
      entrypoint_args:
        description: "Аргументы для бинаря"
        type: string
        default: "-conf /configs"

      build_image:
        type: boolean
        default: true
      run_tests:
        type: boolean
        default: false
    secrets:
      REGISTRY_LOGIN:
        required: true
      REGISTRY_PASS:
        required: true
      ENV_FILE:
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        working-directory: ${{ inputs.working_dir }}

    env:
      REGISTRY:    ${{ inputs.registry }}
      CONFIG_FILE: ${{ inputs.config_file }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          ref: ${{ github.sha }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Derive app name and version
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          NAME=$(yq -r '.app.name // "service"' "${CONFIG_FILE}" || echo service)
          CFG_VER=$(yq -r '.app.version // ""' "${CONFIG_FILE}" || true)
          GIT_VER=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          RAW_VER=""
          if [ -n "$GIT_VER" ]; then RAW_VER="$GIT_VER";
          elif [ -n "$CFG_VER" ]; then RAW_VER="$CFG_VER";
          else RAW_VER="v0.0.0"; fi
          if [[ "$RAW_VER" =~ ^v(.+)$ ]]; then TAG="${BASH_REMATCH[1]}"; else TAG="$RAW_VER"; fi
          [ -n "$TAG" ] || TAG="0.0.0-${GITHUB_SHA::7}"
          IMAGE="${REGISTRY}/${NAME}:${TAG}"
          echo "name=$NAME"   >> "$GITHUB_OUTPUT"
          echo "version=$TAG" >> "$GITHUB_OUTPUT"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      # (опционально) тесты
      - name: (Optional) Setup Go for tests
        if: ${{ inputs.run_tests }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version }}
      - name: (Optional) Run tests
        if: ${{ inputs.run_tests }}
        run: go test ./...

      # .env генерим только если реально хотим печь в образ
      - name: Create .env from secrets (if baked)
        if: ${{ inputs.copy_env_into_image }}
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        shell: bash
        run: |
          : > .env
          if [ -n "${ENV_FILE:-}" ]; then printf '%s\n' "$ENV_FILE" > .env; fi

      - name: Generate Dockerfile (templated, no sed)
        id: gen
        shell: bash
        run: |
          set -euo pipefail
          GEN_DF="${RUNNER_TEMP}/Dockerfile.gen"

          # normalize ports
          PORTS="$(echo "${{ inputs.expose_ports }}" | tr ',' ' ' | xargs || true)"

          {
            echo "# syntax=docker/dockerfile:1.7"
            echo
            echo "FROM golang:${{ inputs.go_version }} AS builder"
            echo "WORKDIR /src"
            echo "COPY go.mod go.sum ./"
            echo "RUN --mount=type=cache,target=/go/pkg/mod \\"
            echo "    --mount=type=cache,target=/root/.cache/go-build \\"
            echo "    go mod download"
            echo "COPY . ."
            echo "RUN --mount=type=cache,target=/go/pkg/mod \\"
            echo "    --mount=type=cache,target=/root/.cache/go-build \\"
            echo "    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \\"
            echo "    go build -trimpath -ldflags=\"-s -w -buildid=\" -o /out/service.linux ${{ inputs.go_build_target }}"
            echo
            echo "FROM ${{ inputs.runtime_image }}"
            echo "WORKDIR /app"
            echo "COPY --from=builder /out/service.linux /app/service.linux"
            echo "RUN mkdir -p /configs"
            echo "COPY configs/config.yaml /configs/config.yaml"
            if [ "${{ inputs.copy_env_into_image }}" = "true" ]; then
              echo "COPY .env /app/.env"
            fi
            if [ -n "$PORTS" ]; then
              echo "EXPOSE $PORTS"
            fi
            # ENTRYPOINT + CMD раздельно, чтобы можно было менять cmd_args при запуске
            echo "ENTRYPOINT [\"/app/service.linux\"]"
            # Преобразуем строку аргументов в массив JSON безопасно:
            # здесь оставим одной строкой – Kubernetes/Compose всё равно могут переопределить CMD.
            printf 'CMD [%s]\n' "$(jq -Rn --arg s '${{ inputs.entrypoint_args }}' '($s|split(" "))|map(@json)|join(",")')"
          } > "$GEN_DF"

          echo "dockerfile=$GEN_DF" >> "$GITHUB_OUTPUT"

      - name: Sanity check
        run: |
          set -euo pipefail
          test -f "${{ steps.gen.outputs.dockerfile }}" || { echo "Generated Dockerfile not found"; exit 1; }
          ls -la

      - name: Set up Docker Buildx
        if: ${{ inputs.build_image }}
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        if: ${{ inputs.build_image }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_LOGIN }}
          password: ${{ secrets.REGISTRY_PASS }}

      - name: Build & Push image (BuildKit cache)
        if: ${{ inputs.build_image }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ format('{0}/{1}', github.workspace, inputs.context) }}
          file:    ${{ steps.gen.outputs.dockerfile }}
          tags:       ${{ steps.meta.outputs.image }}
          push:       true
          cache-from: type=gha
          cache-to:   type=gha,mode=max

      - name: Summary
        run: |
          echo "name:    ${{ steps.meta.outputs.name }}"
          echo "version: ${{ steps.meta.outputs.version }}"
          echo "image:   ${{ steps.meta.outputs.image }}"
          echo "::notice title=Build::${{ steps.meta.outputs.name }} v${{ steps.meta.outputs.version }}"
